////////////////////////////////////////////////////////////////////////////////
// Daniel Smith
// dsmith@ics.mq.edu.au
////////////////////////////////////////////////////////////////////////////////
// Filename: entity_tag.h
////////////////////////////////////////////////////////////////////////////////
// This file contains the definition of the EntityTag and EntityTagset 
// classes. The EntityTag class stores information regarding a tag given to a 
// Named Entity.  The EntityTagset class is a collection of tags.
////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2008  Diego Molla-Aliod <diego@ics.mq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __entity_tag__
#define __entity_tag__

#include <cstdlib>
#include <sstream>
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <boost/regex.hpp>
#include "xml_string.h"

using namespace std;
using namespace boost;
using namespace AF;

namespace AF {

////////////////////////////////////////////////////////////////////////////////
// The tag class stores the details of a Named Entity Tag
// A tag may be: <ENAMEX TYPE="ORGANIZATION:CORPORATION">
// Methods allow for retrieval of tag details.
////////////////////////////////////////////////////////////////////////////////
class EntityTag {
  public:

////////////////////////////////////////////////////////////////////////////////
// Constructors:
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Empty tag.
////////////////////////////////////////////////////////////////////////////////
    EntityTag();

////////////////////////////////////////////////////////////////////////////////
// Copy constructor
////////////////////////////////////////////////////////////////////////////////
    EntityTag(const EntityTag& tag);

////////////////////////////////////////////////////////////////////////////////
// Accepts a string and parses XML to set tag variables.
////////////////////////////////////////////////////////////////////////////////
    EntityTag(const StringXML xml_tag);

////////////////////////////////////////////////////////////////////////////////
// Accepts two strings, the root and sub-tag to set variables.
// Assumes only two levels.
////////////////////////////////////////////////////////////////////////////////
    EntityTag(const StringXML root, const StringXML sub);

////////////////////////////////////////////////////////////////////////////////
// Accepts a vector of strings, assigns the vector values to the tag levels
// according to the index in the vector.
////////////////////////////////////////////////////////////////////////////////
    EntityTag (const vector<StringXML> tags);

// Assigns a new tag to an existing one.
    void
    assign(const StringXML& t);

////////////////////////////////////////////////////////////////////////////////
// Returns a string in XML format with tag details for use as opening tag:
// e.g. <ENAMEX TYPE="ORGANIZATION">
////////////////////////////////////////////////////////////////////////////////
    const StringXML
    openingTag() const;

////////////////////////////////////////////////////////////////////////////////
// Returns a string in XML format for use as closing tag:
// e.g. </ENAMEX>
////////////////////////////////////////////////////////////////////////////////
    const StringXML
    closingTag() const;

////////////////////////////////////////////////////////////////////////////////
// Returns the number of levels in the tag:
// e.g. <ENAMEX TYPE="ORGANIZATION"> has 2 levels
////////////////////////////////////////////////////////////////////////////////
    const int
    levelCount() const;

////////////////////////////////////////////////////////////////////////////////
// Returns the detail of the tag given the level.
// e.g. detail(0) of <ENAMEX TYPE="ORGANIZATION"> is "ENAMEX"
////////////////////////////////////////////////////////////////////////////////
    const StringXML
    detail(const int level) const;


////////////////////////////////////////////////////////////////////////////////
// Operator '=='
////////////////////////////////////////////////////////////////////////////////
bool
operator==(const EntityTag& other) const;

bool
operator<(const EntityTag& other) const;

  private:
    vector<StringXML> _levels;

};

////////////////////////////////////////////////////////////////////////////////
// A tagset stores a collection of tags, and provides methods for lookup and 
// classification matching.
////////////////////////////////////////////////////////////////////////////////
class EntityTagset {
  public:

////////////////////////////////////////////////////////////////////////////////
// Constructors:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Creates an empty tagset, simply initialises variables
////////////////////////////////////////////////////////////////////////////////
    EntityTagset();

////////////////////////////////////////////////////////////////////////////////
// Creates a tagset using a tag map in XML format.
////////////////////////////////////////////////////////////////////////////////
    EntityTagset(const StringXML& xml);

    EntityTagset(istream& in);
  
////////////////////////////////////////////////////////////////////////////////
// Returns the classification number given a tag and 'isBegin' flag.
// For use in printing training data, determines what classification a 
// tag will be given.
// Assumes that each tag can have two classifications (Begin and In)
// Formula used is (2 * tagIndex) + 1)) + (1 * isBegin)
// 0 is treated as 'Out' or no classification class.
// If tag does not exist, returns 0 as classification.
////////////////////////////////////////////////////////////////////////////////
    const int
    getClassification(const EntityTag& tag, const bool isBegin=true) const;

////////////////////////////////////////////////////////////////////////////////
// 'getIndex' returns the index of a given tag
////////////////////////////////////////////////////////////////////////////////
    const int
    getIndex(const EntityTag& tag) const;

    const int
    getIndex(const int classification) const;

////////////////////////////////////////////////////////////////////////////////
// Returns the tag given a classification number. 'isBegin' is set to true if
// the given classification is a begin classification.
// For use after classification has occurred: matches classifications
// with tags.
// If classification is invalid, an empty tag is returned.
////////////////////////////////////////////////////////////////////////////////
    const EntityTag*
    getTag(const int c, bool& isBegin) const;

////////////////////////////////////////////////////////////////////////////////
// 'outClass' returns the classification for no tag: 0
////////////////////////////////////////////////////////////////////////////////
    const int
    outClass() const;

////////////////////////////////////////////////////////////////////////////////
// 'addTag' adds a tag to the dataset.
////////////////////////////////////////////////////////////////////////////////
// Accepts a string in XML format storing tag details.
////////////////////////////////////////////////////////////////////////////////
    void
    addTag(const StringXML& tag);

////////////////////////////////////////////////////////////////////////////////
// Accepts a tag object.
////////////////////////////////////////////////////////////////////////////////
    void
    addTag(const EntityTag& tag);

////////////////////////////////////////////////////////////////////////////////
// Returns the number of tags in the tagset
////////////////////////////////////////////////////////////////////////////////
    int
    tagCount() const;


////////////////////////////////////////////////////////////////////////////////
// Returns the number of classes in the tagset
////////////////////////////////////////////////////////////////////////////////
    const int
    classCount() const;

////////////////////////////////////////////////////////////////////////////////
// Returns true if the given tag exists in the tagset.
////////////////////////////////////////////////////////////////////////////////
    const bool
    exists(EntityTag tag) const;

////////////////////////////////////////////////////////////////////////////////
// Print the tagset to the given output stream.
////////////////////////////////////////////////////////////////////////////////
    const void
    printTagMap(ostream& ops) const;

////////////////////////////////////////////////////////////////////////////////
// Print the tags in the tagset
////////////////////////////////////////////////////////////////////////////////
    const void
    printTags(ostream& ops) const;

  private:
    map<EntityTag,int> _tags;
};

}

#endif
