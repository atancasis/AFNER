////////////////////////////////////////////////////////////////////////////////
// Daniel Smith
// dsmith@ics.mq.edu.au  2006
////////////////////////////////////////////////////////////////////////////////
// Filename: tokenDeco.h
////////////////////////////////////////////////////////////////////////////////
// This file contains the TokenDeco definition.
// TokenDeco is a Decorator class for Token
////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2008  Diego Molla-Aliod <diego@ics.mq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __tokeniser_deco__
#define __tokeniser_deco__

#include <vector>
#include <string>
#include <map>
#include "tokeniser.h"
#include "xml_string.h"

using namespace std;
using namespace AF;


namespace AF {

////////////////////////////////////////////////////////////////////////////////
// 'Token' denotes a word in the text.
////////////////////////////////////////////////////////////////////////////////
class TokenDeco : public Token {
public:
////////////////////////////////////////////////////////////////////////////////
// Constructor: initialises the token pointer
////////////////////////////////////////////////////////////////////////////////
  TokenDeco(const Token* t);

////////////////////////////////////////////////////////////////////////////////
// Returns a pointer to the token
////////////////////////////////////////////////////////////////////////////////
  const Token* 
  getComponent() const;

////////////////////////////////////////////////////////////////////////////////
// 'setInfo(name,value)' sets extra information about a token, name and value.
////////////////////////////////////////////////////////////////////////////////
  void
  setInfo(const StringXML name, const double value);
////////////////////////////////////////////////////////////////////////////////
// 'getInfo(name)' returns true if a value that corresponds to the name of some
// information about the token stored, false otherwise. The value is assigned to
// the given 'value' variable.
////////////////////////////////////////////////////////////////////////////////

  bool
  getInfo(const StringXML& name, double& value) const;

private:
  const Token* _component;
////////////////////////////////////////////////////////////////////////////////
// '_info' stores extra information about the token.  The relationship is
// is similar to a feature name/value relationship.
////////////////////////////////////////////////////////////////////////////////
  map<StringXML,double> _info;
};

vector<TokenDeco>
convertTokens(const vector<Token>& tokens);

}

#endif
