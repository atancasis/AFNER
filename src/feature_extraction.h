////////////////////////////////////////////////////////////////////////////////
// Filename: feature_extraction.h
////////////////////////////////////////////////////////////////////////////////
// This file contains the function definitions of the feature
// extraction used for named entity recognition.
////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2008  Diego Molla-Aliod <diego@ics.mq.edu.au>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
////////////////////////////////////////////////////////////////////////////////

#ifndef __feature_extraction__
#define __feature_extraction__

#include <vector>
#include <string>
#include <boost/regex.hpp>
#include "tokeniser.h"
#include "tokenDeco.h"
#include "xml_string.h"
#include "regex_handler.h"
#include "list_handler.h"

using namespace std;
using namespace AF;
using namespace boost;

namespace AF {

////////////////////////////////////////////////////////////////////////////////
// 'FeatureValue' holds a feature with its value.
////////////////////////////////////////////////////////////////////////////////
class FeatureValue {
////////////////////////////////////////////////////////////////////////////////
public:
////////////////////////////////////////////////////////////////////////////////
// 'FeatureValue()' constructor.  It takes the name of a feature and
// its value.
////////////////////////////////////////////////////////////////////////////////
  FeatureValue(const StringXML& feature, double value);
  
////////////////////////////////////////////////////////////////////////////////
// 'getFeature()' returns the name of the feature.
////////////////////////////////////////////////////////////////////////////////
  StringXML
  getFeature() const;
  
////////////////////////////////////////////////////////////////////////////////
// 'getValue()' returns the value of the feature.
////////////////////////////////////////////////////////////////////////////////
  double
  getValue() const;
  
protected:
private:
////////////////////////////////////////////////////////////////////////////////
// '_feature' stores the name of the feature
////////////////////////////////////////////////////////////////////////////////
  StringXML _feature;

////////////////////////////////////////////////////////////////////////////////
// '_value' stores the value of the feature
////////////////////////////////////////////////////////////////////////////////
  double _value;

};


////////////////////////////////////////////////////////////////////////////////
// 'FeatureVector' holds a vector of 'FeatureValue's.
////////////////////////////////////////////////////////////////////////////////
typedef vector<FeatureValue> FeatureVector;


////////////////////////////////////////////////////////////////////////////////
// 'FeatureValueExtractor' is an abstract base class that defines the
// interface for concrete algorithms that extract features from the
// text.
////////////////////////////////////////////////////////////////////////////////
class FeatureValueExtractor {
////////////////////////////////////////////////////////////////////////////////
public:
////////////////////////////////////////////////////////////////////////////////
// 'FeatureValueExtractor()' constructor.
////////////////////////////////////////////////////////////////////////////////
  FeatureValueExtractor(const StringXML name, const int context=0,
       const StringXML alias="");

////////////////////////////////////////////////////////////////////////////////
// 'getName' returns the name of the FeatureValueExtractor
////////////////////////////////////////////////////////////////////////////////
  StringXML
  getName() const;

////////////////////////////////////////////////////////////////////////////////
// 'getAlias' returns the alias (if any) assigned to the FeatureValueExtractor.
// If no alias is assigned, the name is returned
////////////////////////////////////////////////////////////////////////////////
  StringXML
  getAlias() const;
 
////////////////////////////////////////////////////////////////////////////////
// 'setWeight sets the weight of the FeatureValueExtractor
////////////////////////////////////////////////////////////////////////////////
  void
  setWeight(const double weight);

////////////////////////////////////////////////////////////////////////////////
// 'getWeight' returns the weight of the FeatureValueExtractor
////////////////////////////////////////////////////////////////////////////////
  double
  getWeight() const;

////////////////////////////////////////////////////////////////////////////////
// 'getContext' returns the distance away from the target token that the FVE 
// calculates a feature value for
////////////////////////////////////////////////////////////////////////////////
  int
  getContext() const;

////////////////////////////////////////////////////////////////////////////////
// '~FeatureValueExtractor()' destructor.
////////////////////////////////////////////////////////////////////////////////
  virtual ~FeatureValueExtractor();
  
////////////////////////////////////////////////////////////////////////////////
// 'operator()()' computes the FeatureValue.  It works on tokens and
// computes the value of a feature of the particular index.
// Context is the token relative to the current token that the value
// is to be computed for, e.g. 0 = current, -1 = previous, 
// 2 = two after.
////////////////////////////////////////////////////////////////////////////////
  virtual FeatureValue
  operator()(vector<TokenDeco>& tokens,
      const vector<TokenDeco>::iterator index,
      const StringXML& text) const=0;

protected:
  // stores how far from the given token the feature is to be
  // calculated for
  const StringXML _feature_name;
  const int _context;
  StringXML _alias;
  double _weight;
private:
};


////////////////////////////////////////////////////////////////////////////////
// 'FeatureVectorValueExtractor' is an abstract class that defines the interface
// for computation of feature values by applying FeatureValueExtractor
// algorithms to text.
////////////////////////////////////////////////////////////////////////////////
class FeatureVectorValueExtractor {
////////////////////////////////////////////////////////////////////////////////
public:

////////////////////////////////////////////////////////////////////////////////
// 'FeatureVectorValueExtractor()' default constructor.
////////////////////////////////////////////////////////////////////////////////
  FeatureVectorValueExtractor();

////////////////////////////////////////////////////////////////////////////////
// '~FeatureVectorValueExtractor()' destructor.
////////////////////////////////////////////////////////////////////////////////
  virtual ~FeatureVectorValueExtractor();

  void
  printFeatures(ostream& os) const;

  bool
  setFeatureWeight(const StringXML& feature_name, const double weight);

  void
  setDefaultFeatureWeight(const double weight);
////////////////////////////////////////////////////////////////////////////////
// 'operator()()' applies the FeatureValueExtractor algorithms to
// the index in vector<Token> and returns a FeatureVector for that
// Token.
////////////////////////////////////////////////////////////////////////////////
  virtual FeatureVector
  operator()(vector<TokenDeco>& tokens,
      const vector<TokenDeco>::iterator index,
      const StringXML& text,const bool ignoreWeights=false) const;

////////////////////////////////////////////////////////////////////////////////
// 'operator()()' applies the FeatureValueExtractor algorithms to
// the vector<Token> and returns a vector<FeatureVector> that has the
// same length of the vector of tokens.  For each token, a feature
// vector will be computed and returned in the same order.
////////////////////////////////////////////////////////////////////////////////
  virtual vector<FeatureVector>
  operator()(vector<TokenDeco>& tokens,const StringXML& text,
      const bool ignoreWeights=false) const;
protected:

////////////////////////////////////////////////////////////////////////////////
// GetFeatureDetectionAlgorithms creates the FeatureValueExtractor objects for
// use by the FeatureVectorValueExtractor.
////////////////////////////////////////////////////////////////////////////////
  virtual vector<FeatureValueExtractor*>
  GetFeatureDetectionAlgorithms(const ListHandler& lh,
      const RegexHandler& rh,const EntityTagset& tset,
      const vector<boost::regex>& regex_list,
      const int context,const double default_weight,
      const StringXML& freqFile,
      const StringXML& prevFreqFile) const = 0;

////////////////////////////////////////////////////////////////////////////////
// '_featureAlgorithms' stores the FeatureValueExtractors that will be
// applied to the vector<Token>.
////////////////////////////////////////////////////////////////////////////////
  vector<FeatureValueExtractor*> _featureAlgorithms;

private:

};

}

#endif // end __feature_extraction__
// end of file: feature_extraction.h
